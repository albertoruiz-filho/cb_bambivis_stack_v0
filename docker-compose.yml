services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: cb_bambivis_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cb_bambivis}
      POSTGRES_USER: ${POSTGRES_USER:-cbuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - cb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cbuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    image: ${BACKEND_IMAGE:-node:18-alpine}
    container_name: cb_bambivis_backend
    restart: unless-stopped
    working_dir: /app
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-cbuser}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-cb_bambivis}
      API_PORT: ${API_PORT:-3000}
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET must be set}
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    ports:
      - "${API_PORT:-3000}:3000"
    networks:
      - cb_network
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "npm install && npm start"

  # Frontend
  frontend:
    image: ${FRONTEND_IMAGE:-node:18-alpine}
    container_name: cb_bambivis_frontend
    restart: unless-stopped
    working_dir: /app
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000}
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    networks:
      - cb_network
    depends_on:
      - backend
    command: sh -c "npm install && npm start"

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: cb_bambivis_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - cb_network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  db_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  cb_network:
    driver: bridge
